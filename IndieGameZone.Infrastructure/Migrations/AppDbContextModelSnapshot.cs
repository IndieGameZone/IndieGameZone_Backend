// <auto-generated />
using System;
using IndieGameZone.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndieGameZone.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Achievements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.AgeRestrictions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AgeRestrictions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c91901a1-1b27-4e42-9b6f-869c920b1b1c"),
                            Code = "PEGI 3",
                            Description = "Suitable for all age groups. No sounds or pictures likely to frighten young children."
                        },
                        new
                        {
                            Id = new Guid("c48f1c63-f301-44e9-8766-3d4b60134b5f"),
                            Code = "PEGI 7",
                            Description = "May contain some frightening scenes or sounds."
                        },
                        new
                        {
                            Id = new Guid("32d6d768-d670-4ef5-acaa-fcfe4c8167d3"),
                            Code = "PEGI 12",
                            Description = "May contain violence of a more graphic nature towards fantasy characters, or mild bad language."
                        },
                        new
                        {
                            Id = new Guid("3df25298-5f31-4639-a3a0-425ae4db72ca"),
                            Code = "PEGI 16",
                            Description = "More realistic violence, sexual activity, use of tobacco or alcohol, and stronger language."
                        },
                        new
                        {
                            Id = new Guid("92ca7f1e-94c3-4c48-a468-61d3bab8f0b9"),
                            Code = "PEGI 18",
                            Description = "Depictions of gross violence, sexual violence, or content that glamorizes illegal drug use."
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.BanHistories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnbanDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BanHistories");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Categories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a03afa3-2635-43bd-a58c-daeb80d3cef7"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("dfeeb47a-7e69-4927-a65b-b803a8befe9f"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("89a4e6d2-2cfe-4474-9b96-6d3595ad4705"),
                            Name = "Role-Playing"
                        },
                        new
                        {
                            Id = new Guid("2d740ce2-a803-4b32-8df8-ab5139203742"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("929c6ef0-41e5-4bc5-9ef9-86f0703b9c20"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("3623f541-4b87-4174-bfce-dd2b027c7a33"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("bca8721b-c323-44a1-afcf-876e206ab035"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("3ef51667-ff8d-4873-979b-a3b9a5dbe1b1"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("88fd3b90-179a-4c18-8c3a-5f3929992e0a"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("b277ba85-f89b-4617-a464-49cda6e8d387"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("4d84bb23-8644-4720-8344-d4a9d0433d35"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("fcb43570-6859-41f4-8d72-ce59a31f5858"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("dcf41a71-dd69-43db-af34-a8ca8592b079"),
                            Name = "Open World"
                        },
                        new
                        {
                            Id = new Guid("ab34908d-20dc-43bd-b80d-eac5b59d6238"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("592e7334-c896-46f6-ad6c-a781a2ab7219"),
                            Name = "BoardGame"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.CommercialPackages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CommercialPackages");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.CommercialRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommercialPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommercialPackageId");

                    b.HasIndex("GameId");

                    b.ToTable("CommercialRegistration");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Coupons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Discounts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02e6a0ab-2720-4368-8b80-9eb3f46eece0"),
                            EndDate = new DateOnly(2025, 6, 7),
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            Percentage = 10.0,
                            StartDate = new DateOnly(2025, 5, 28)
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2212b056-b7e1-4bd4-a258-aae3e24f9a87"),
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            Image = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseatImage1.png"
                        },
                        new
                        {
                            Id = new Guid("396cf491-b737-4983-a65e-42ecd36080d7"),
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            Image = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseatImage2.png"
                        },
                        new
                        {
                            Id = new Guid("dc5e81ec-24b6-4109-ba9f-e9de4ad9a855"),
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            Image = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseatImage3.png"
                        },
                        new
                        {
                            Id = new Guid("81738026-cd42-482c-a692-f080a6fe9240"),
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            Image = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseatImage4.png"
                        },
                        new
                        {
                            Id = new Guid("d3e36747-a19a-41ff-b8a1-1c274e378dab"),
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            Image = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseatImage5.png"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameLanguages", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameLanguages");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            LanguageId = new Guid("8f29f2a5-146d-44df-95ba-a972e36b7527")
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GamePlatforms", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            PlatformId = new Guid("a47b287d-6ed7-4bb0-be73-c2581dcb9b3e"),
                            File = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseat_Window.zip"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameRecommendations", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameRecommendations");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameStatuses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("GameStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92f9b646-d1db-4bd1-93ed-e5dc73ccd37e"),
                            Name = "Paid"
                        },
                        new
                        {
                            Id = new Guid("5fde9b6a-ddda-4833-a744-7fbb4d8efb3f"),
                            Name = "Free"
                        },
                        new
                        {
                            Id = new Guid("8097fd8b-f4ad-4fb9-93f3-6f8598cf6a4f"),
                            Name = "Alpha"
                        },
                        new
                        {
                            Id = new Guid("5fef12e9-ad13-4707-ae74-7ecc23a43d5b"),
                            Name = "Demo"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameTags", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("GameTags");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            TagId = new Guid("1c175c84-379e-43dc-a95a-aafd910d6a00")
                        },
                        new
                        {
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            TagId = new Guid("fcf4e928-dc77-405c-a13e-1d1d5e308d6b")
                        },
                        new
                        {
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            TagId = new Guid("3ef686ac-5e11-45d8-afab-223d2d149f6f")
                        },
                        new
                        {
                            GameId = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            TagId = new Guid("37223e27-41ad-44cb-9332-d985dbc9f708")
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Games", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgeRestrictionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageSession")
                        .HasColumnType("float");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CensoredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCensoredByAI")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgeRestrictionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("GameStatusId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65745560-c7e9-48c3-bc36-8c88d66458c7"),
                            AgeRestrictionId = new Guid("c48f1c63-f301-44e9-8766-3d4b60134b5f"),
                            AverageSession = 0.5,
                            CategoryId = new Guid("7a03afa3-2635-43bd-a58c-daeb80d3cef7"),
                            CoverImage = "https://indiegamezone.blob.core.windows.net/indiegamezone/TheDeadseatCoverImage.png",
                            CreatedAt = new DateTime(2025, 5, 28, 21, 42, 38, 663, DateTimeKind.Local).AddTicks(3644),
                            Description = "",
                            DeveloperId = new Guid("293191b7-f7b2-4f28-8857-5afa96866a2f"),
                            GameStatusId = new Guid("92f9b646-d1db-4bd1-93ed-e5dc73ccd37e"),
                            IsActive = true,
                            IsCensoredByAI = true,
                            Name = "The Deadseat",
                            Price = 100000.0,
                            VideoLink = "https://www.youtube.com/watch?v=Q4A2c8-BN78&t=2s"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Languages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80e3581d-3836-4921-a838-b7d917b5e11f"),
                            Name = "Vietnamese"
                        },
                        new
                        {
                            Id = new Guid("8f29f2a5-146d-44df-95ba-a972e36b7527"),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("2f98f2c8-2640-4cff-a8eb-ed61d9179dcb"),
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = new Guid("ae4f3cfb-6dd6-473b-a1c6-695f9edce11e"),
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("73b3d9d2-ecbf-4d91-95ad-e9a48b7e54cd"),
                            Name = "German"
                        },
                        new
                        {
                            Id = new Guid("11a64feb-23f6-41ad-a55f-a9f487d04a85"),
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("04adfb56-cb77-4209-8fc3-a7b96b768784"),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("3ec80948-8c1a-46aa-9fd6-01feeb273c22"),
                            Name = "Russian"
                        },
                        new
                        {
                            Id = new Guid("149615f6-6214-4e42-a016-1dba7d248c0f"),
                            Name = "Korean"
                        },
                        new
                        {
                            Id = new Guid("ca29265a-4bab-4aa1-a819-9636878b50da"),
                            Name = "Portuguese"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Libraries", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Platforms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("574cb883-e637-4f18-9518-269e4d22312c"),
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = new Guid("a47b287d-6ed7-4bb0-be73-c2581dcb9b3e"),
                            Name = "Windows"
                        },
                        new
                        {
                            Id = new Guid("db498cbb-c76f-4166-9836-8ecb462419e6"),
                            Name = "Linux"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostReactions", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostTags", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CensoredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCensoredByAI")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.ReportTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Reports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GameId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReportingUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Reviews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f7b3f0c-3f54-4fb8-a215-33cd496c3be7"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b86a5b00-0393-4524-9f56-fa7ca800e79c"),
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = new Guid("51999f00-0f63-4236-8c81-94c43fcf7586"),
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = new Guid("7211a346-6e23-431c-a6bd-2f02aa5de68a"),
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Tags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c175c84-379e-43dc-a95a-aafd910d6a00"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("cd543d0f-1761-4874-945b-53863f00942b"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("4d1a6086-ed27-4767-8fb6-4c4af12c384c"),
                            Name = "Role-Playing"
                        },
                        new
                        {
                            Id = new Guid("b9e9a223-25b3-491b-ba92-e185a74d82ab"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("c7cee309-8f38-43fd-8512-e40e4d6f1ccd"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("3d76f55a-a3c8-4f51-a959-6a36c90ba4bd"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("71918e61-bb0b-4ca1-975a-616d869769bf"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("b92d60b0-0447-4ef2-9233-088b4d91cce5"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("aa592c96-400a-4c67-bf18-3b82823e9ef9"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("41c1f4f5-4cf0-411b-bb15-e59f15b04762"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("c04cba4a-a827-4a49-b61b-f02798ef17c9"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("9f3617ec-c56d-4423-ad07-43c904ef6542"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("78530cfe-1488-49ab-befb-0ee332cfe7a1"),
                            Name = "Open World"
                        },
                        new
                        {
                            Id = new Guid("46c0001e-beb3-4291-885a-f076e53f40fd"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("a137e663-30d5-4ed9-8aa3-b9b500f18de7"),
                            Name = "BoardGame"
                        },
                        new
                        {
                            Id = new Guid("a39f8614-3936-48cf-bb4a-01c590486bdc"),
                            Name = "Indie"
                        },
                        new
                        {
                            Id = new Guid("510d85f4-c8dc-4228-93cb-311809751bed"),
                            Name = "Multiplayer"
                        },
                        new
                        {
                            Id = new Guid("e4cc8cbe-9b71-416d-967c-b88ad852be45"),
                            Name = "Singleplayer"
                        },
                        new
                        {
                            Id = new Guid("72229e67-bba2-41ae-9fee-84c97d01d1fb"),
                            Name = "MacOS Game"
                        },
                        new
                        {
                            Id = new Guid("c620e06f-49b2-4cc7-8be5-19d63e8d915a"),
                            Name = "Linux Game"
                        },
                        new
                        {
                            Id = new Guid("cb631ff7-d19b-40a5-b948-a3b138703e19"),
                            Name = "Windows Game"
                        },
                        new
                        {
                            Id = new Guid("fcf4e928-dc77-405c-a13e-1d1d5e308d6b"),
                            Name = "2D"
                        },
                        new
                        {
                            Id = new Guid("3ef686ac-5e11-45d8-afab-223d2d149f6f"),
                            Name = "3D"
                        },
                        new
                        {
                            Id = new Guid("37223e27-41ad-44cb-9332-d985dbc9f708"),
                            Name = "Pixel Art"
                        },
                        new
                        {
                            Id = new Guid("83f90ed3-38f1-40a9-88e5-8ce4a728a4a4"),
                            Name = "Kungfu"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Transactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.UserAchievements", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.UserFollows", b =>
                {
                    b.Property<Guid>("FollowingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowingUserId", "FollowedUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.UserProfiles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e5d8947f-6794-42b6-ba67-201f366128b8"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            BankAccount = "",
                            BankName = "",
                            Bio = "",
                            Birthday = new DateOnly(2002, 1, 23),
                            FacebookLink = "",
                            Fullname = "Admin"
                        },
                        new
                        {
                            UserId = new Guid("3fe77296-fdb3-4d71-8b99-ef8380c32037"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            BankAccount = "",
                            BankName = "",
                            Bio = "",
                            Birthday = new DateOnly(2002, 1, 23),
                            FacebookLink = "",
                            Fullname = "Moderator"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5d8947f-6794-42b6-ba67-201f366128b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38bef736-aee6-4a01-a991-ffbb0938cef6",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            JoinedDate = new DateTime(2025, 5, 28, 21, 42, 38, 678, DateTimeKind.Local).AddTicks(5537),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOloYxwY56KQYbQC8OCd68i6jNWOgWWdJX6q74IRxE6FfahXv27vK4qd6lXCAvEMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2729ca3-5f93-443b-a69e-f93b83c4ad21",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("3fe77296-fdb3-4d71-8b99-ef8380c32037"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63fad390-42b5-42ec-9d66-cc9d9bbb39e0",
                            Email = "moderator@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            JoinedDate = new DateTime(2025, 5, 28, 21, 42, 38, 803, DateTimeKind.Local).AddTicks(7231),
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@GMAIL.COM",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAENZT+RjpA64eKInbQi7QL8EetBFqOXUMXgCk+l9elV8/AcHR9MEj4ySRjYDHx5AsSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07712a85-f256-4a69-8d9e-4f499ee8a4b8",
                            TwoFactorEnabled = false,
                            UserName = "moderator"
                        },
                        new
                        {
                            Id = new Guid("293191b7-f7b2-4f28-8857-5afa96866a2f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f6c68f2-de9d-4bc3-afa7-1fd93ccf7eda",
                            Email = "developer1@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            JoinedDate = new DateTime(2025, 5, 28, 21, 42, 38, 963, DateTimeKind.Local).AddTicks(9112),
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVELOPER1@GMAIL.COM",
                            NormalizedUserName = "DEVELOPER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2hKPy8sIdNYUxlrdEZWDa3256LGkUDvQOvxIpiilA/8NnJ+uuMUSRp5zG9KEsbpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26dd4cb9-73eb-4070-a26b-409081f2bf69",
                            TwoFactorEnabled = false,
                            UserName = "developer1"
                        },
                        new
                        {
                            Id = new Guid("23879117-e09e-40f1-b78f-1493d81baf49"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66603482-a9c1-4d3b-8b11-7af5647523d9",
                            Email = "player@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            JoinedDate = new DateTime(2025, 5, 28, 21, 42, 38, 898, DateTimeKind.Local).AddTicks(7856),
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER@GMAIL.COM",
                            NormalizedUserName = "PLAYER",
                            PasswordHash = "AQAAAAIAAYagAAAAEASwNrPvgFx8EPQQ9pNF3fJmIAvKnxgOOlf2rQqXNVFQMCo9MoA7rpxiwKk8Nd26lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b412446-0f4e-4db6-861c-1b0bbb16a131",
                            TwoFactorEnabled = false,
                            UserName = "player"
                        },
                        new
                        {
                            Id = new Guid("34670beb-a794-4419-adf8-0465eea22a78"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c3c53af-6f9e-4b09-ba20-48ad1835aadc",
                            Email = "developer2@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            JoinedDate = new DateTime(2025, 5, 28, 21, 42, 39, 27, DateTimeKind.Local).AddTicks(9716),
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVELOPER2@GMAIL.COM",
                            NormalizedUserName = "DEVELOPER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEEBSCkaITsokEF2N2Ct/wPv91Ejbfwjqbg0ZBjinCTvX/yL2g7EEhfAYpOBBHieq3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36eec191-83bf-4a8a-ab9d-917d5a6a543e",
                            TwoFactorEnabled = false,
                            UserName = "developer2"
                        },
                        new
                        {
                            Id = new Guid("c25dc5ef-4e98-421e-90d3-7eb76ba269fe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2caa0869-0a27-44ea-9b67-dbc5ee77f11e",
                            Email = "developer3@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            JoinedDate = new DateTime(2025, 5, 28, 21, 42, 39, 110, DateTimeKind.Local).AddTicks(935),
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVELOPER3@GMAIL.COM",
                            NormalizedUserName = "DEVELOPER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEKT8gNj12ZOUeGxu0ctC7ZbR2r84xhhYRFliIx1RwsZW4VljjHSP4ro0Qr8ZHF31LQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "349aca66-a563-42bf-b1ee-42db3d952be1",
                            TwoFactorEnabled = false,
                            UserName = "developer3"
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Wallets", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.HasKey("UserId");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e5d8947f-6794-42b6-ba67-201f366128b8"),
                            Balance = 0.0
                        },
                        new
                        {
                            UserId = new Guid("3fe77296-fdb3-4d71-8b99-ef8380c32037"),
                            Balance = 0.0
                        });
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Wishlists", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.WithdrawRequests", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageProof")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("WithdrawRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e5d8947f-6794-42b6-ba67-201f366128b8"),
                            RoleId = new Guid("6f7b3f0c-3f54-4fb8-a215-33cd496c3be7")
                        },
                        new
                        {
                            UserId = new Guid("3fe77296-fdb3-4d71-8b99-ef8380c32037"),
                            RoleId = new Guid("7211a346-6e23-431c-a6bd-2f02aa5de68a")
                        },
                        new
                        {
                            UserId = new Guid("293191b7-f7b2-4f28-8857-5afa96866a2f"),
                            RoleId = new Guid("b86a5b00-0393-4524-9f56-fa7ca800e79c")
                        },
                        new
                        {
                            UserId = new Guid("c25dc5ef-4e98-421e-90d3-7eb76ba269fe"),
                            RoleId = new Guid("b86a5b00-0393-4524-9f56-fa7ca800e79c")
                        },
                        new
                        {
                            UserId = new Guid("34670beb-a794-4419-adf8-0465eea22a78"),
                            RoleId = new Guid("b86a5b00-0393-4524-9f56-fa7ca800e79c")
                        },
                        new
                        {
                            UserId = new Guid("23879117-e09e-40f1-b78f-1493d81baf49"),
                            RoleId = new Guid("51999f00-0f63-4236-8c81-94c43fcf7586")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.BanHistories", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("BanHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.CommercialRegistration", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.CommercialPackages", "CommercialPackage")
                        .WithMany("CommercialRegistrations")
                        .HasForeignKey("CommercialPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("CommercialRegistration")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommercialPackage");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Coupons", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Coupons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Discounts", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Discounts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameImages", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Games")
                        .WithMany("GameImages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameLanguages", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("GameLanguages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Languages", "Language")
                        .WithMany("GameLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GamePlatforms", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Platforms", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameRecommendations", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("GameRecommendations")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("GameRecommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameTags", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("GameTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Tags", "Tag")
                        .WithMany("GameTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Games", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.AgeRestrictions", "AgeRestriction")
                        .WithMany("Games")
                        .HasForeignKey("AgeRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Categories", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "Developers")
                        .WithMany("Games")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.GameStatuses", "GameStatus")
                        .WithMany("Games")
                        .HasForeignKey("GameStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgeRestriction");

                    b.Navigation("Category");

                    b.Navigation("Developers");

                    b.Navigation("GameStatus");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Libraries", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Libraries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Libraries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Notifications", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostComments", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Posts", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostReactions", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Posts", "Post")
                        .WithMany("PostReactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("PostReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostTags", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Posts", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Tags", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Posts", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Posts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Reports", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.PostComments", "PostComment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Reports")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IndieGameZone.Domain.Entities.Posts", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IndieGameZone.Domain.Entities.ReportTypes", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "ReportedUser")
                        .WithMany("ReportedUsers")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "ReportingUser")
                        .WithMany("ReportingUsers")
                        .HasForeignKey("ReportingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Post");

                    b.Navigation("PostComment");

                    b.Navigation("ReportType");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Reviews", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Transactions", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Transactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.UserAchievements", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Achievements", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.UserFollows", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", "FollowedUser")
                        .WithMany("FollowedUsers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "FollowingUser")
                        .WithMany("FollowingUsers")
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.UserProfiles", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("IndieGameZone.Domain.Entities.UserProfiles", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Wallets", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("IndieGameZone.Domain.Entities.Wallets", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Wishlists", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Games", "Game")
                        .WithMany("Wishlists")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.WithdrawRequests", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Transactions", "Transaction")
                        .WithOne("WithdrawRequest")
                        .HasForeignKey("IndieGameZone.Domain.Entities.WithdrawRequests", "TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndieGameZone.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IndieGameZone.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Achievements", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.AgeRestrictions", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Categories", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.CommercialPackages", b =>
                {
                    b.Navigation("CommercialRegistrations");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.GameStatuses", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Games", b =>
                {
                    b.Navigation("CommercialRegistration");

                    b.Navigation("Discounts");

                    b.Navigation("GameImages");

                    b.Navigation("GameLanguages");

                    b.Navigation("GamePlatforms");

                    b.Navigation("GameRecommendations");

                    b.Navigation("GameTags");

                    b.Navigation("Libraries");

                    b.Navigation("Posts");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Languages", b =>
                {
                    b.Navigation("GameLanguages");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Platforms", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.PostComments", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Posts", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostReactions");

                    b.Navigation("PostTags");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.ReportTypes", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Tags", b =>
                {
                    b.Navigation("GameTags");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Transactions", b =>
                {
                    b.Navigation("WithdrawRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("IndieGameZone.Domain.Entities.Users", b =>
                {
                    b.Navigation("BanHistories");

                    b.Navigation("Coupons");

                    b.Navigation("FollowedUsers");

                    b.Navigation("FollowingUsers");

                    b.Navigation("GameRecommendations");

                    b.Navigation("Games");

                    b.Navigation("Libraries");

                    b.Navigation("Notifications");

                    b.Navigation("PostComments");

                    b.Navigation("PostReactions");

                    b.Navigation("Posts");

                    b.Navigation("ReportedUsers");

                    b.Navigation("ReportingUsers");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("Wallet")
                        .IsRequired();

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
